plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    //accessWidenerPath = project(":common").loom.accessWidenerPath
    mixin.defaultRefmapName = "${archivesBaseName.toLowerCase()}-refmap.json"
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}


repositories {
    maven {
        name = "Fuzs Mod Resources"
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    }
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven {
        name = 'Curse Maven'
        url = 'https://cursemaven.com'
        content { includeGroup 'curse.maven' }
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    // modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    modApi "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:20.4.3"

    modImplementation "curse.maven:configured-457570:5105023"
    modRuntimeOnly "com.terraformersmc:modmenu:9.0.0"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "RestoreChatLink",
                "Specification-Vendor"    : "Zom",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${project.version}",
                "Implementation-Vendor"   : "Zom",
        ])
    }
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

def hasSigning = project.hasProperty('keyStore')
        && project.hasProperty('keyStoreAlias')
        && project.findProperty('keyStorePass')
        && project.findProperty('keyStoreType')

// continue from main gradle file https://stackoverflow.com/a/54094378
if (hasSigning) {
    compileJava {
        source = processSource.outputs
    }
}

// https://github.com/Darkhax-Minecraft/Minecraft-Modding-Template/blob/forge-1.16.5/gradle/forge.gradle
task signJar(type: SignJar, dependsOn: jar) {

    onlyIf {
        hasSigning
    }

    if (hasSigning) {

        keyStore = project.findProperty('keyStore')
        alias = project.findProperty('keyStoreAlias')
        storePass = project.findProperty('keyStorePass')
        keyPass = project.findProperty('keyStorePass')
        storeType = project.findProperty('keyStoreType')
        sigFile = 'RCL'

        inputFile = remapJar.archiveFile
        outputFile = remapJar.archiveFile
        refTimeStampFile = 'fabric.mod.json'

        // hash algorithm
        digestAlg = 'SHA-256'
        sigAlg = 'EdDSA'

        // timestamping
        if (project.hasProperty('tsa') && !project.gradle.startParameter.offline) {
            //noinspection HttpUrlsUsage
            tsa = 'http://timestamp.sectigo.com?td=sha256'
            tsaDigestAlg = 'SHA-256'
        }

        //verbose = 'all'
        //signedFileName = "${remapJar.archiveFileName.get()}-signed.jar"
        //exclude('META-INF/mods.toml')

        project.logger.debug('Configured Jar signing for this build');

        build.dependsOn signJar

    } else {
        project.logger.warn('Skipped Jar signing. No keyStore property could be found')
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
